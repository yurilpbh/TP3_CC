apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
  namespace: yuripereira
data:
  pyfile: "import statistics\n\ndef handler(input: dict, context: object) ->
    dict[str, any]:\n    metrics = {}\n    metrics['percent-network-egress'] = round(input['virtual_memory-buffers']/input['virtual_memory-total'],
    2)\n    metrics['percent-memory-caching'] = round(input['virtual_memory-cached']/input['virtual_memory-total'],
    2)\n    if not hasattr(context, 'monitoring_interval'):\n        avg_window = 60/5\n    else:\n
    \       context.set_interval(10)\n        avg_window = 60/context.monitoring_interval\n    env = context.env\n
    \   for key in input.keys():\n        if 'cpu_percent-' in key:\n            cpu_number
    = key.split('-')[1]\n            if f'cpu-window-{cpu_number}' in env:\n                env[f'cpu-window-{cpu_number}'].append(input[key])\n
    \               if len(env[f'cpu-window-{cpu_number}']) == avg_window + 1:\n                    env[f'cpu-window-{cpu_number}'].pop(0)\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec']
    = round(statistics.mean(env[f'cpu-window-{cpu_number}']), 2)\n                else:\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec'] = 0\n            else:\n
    \               env[f'cpu-window-{cpu_number}'] = [input[key]]\n                metrics[f'avg-util-cpu{cpu_number}-60sec']
    = 0\n    \n    context.env = env\n\n    return metrics"
  env: |
    REDIS_INPUT_KEY=metrics
    HANDLER_FUNCTION_NAME=main
  zipfile: |
    UEsDBAoAAAAAAAWVLFoAAAAAAAAAAAAAAAALAAAAX19pbml0X18ucHlQSwMEFAAAAAgA6oAyWv50
    JIW7AQAAQwUAAAsAAABteW1vZHVsZS5wea1T227jIBB9t+R/4A1bG1xnpe1DpfRHLMsieJyytQHB
    OGlU9d93fEnrtklTVcsDEjNnzjkDg+6c9ch61G2IoziqoWGd1CbRxvV4x2qtcMWUNQhPdLTbv6Aw
    ZeJ+zBQB/YpJcyzv4ojR6gC9VoFt2PPLu0jBHXgFBoUBPFj/KGDnIQReEtbb3tSTYsH32mMv26qD
    zvqj2PZNA55wN+fzaFG2vFyx3+kFwRmopHrQZndVcMBB/QM91B0ElJ0bJebqRXCC64YZi+xBBono
    k/lmV4x31mi0nixWmmJ+TzLpfK3DkvtdddCmtgdiv81v/kwpaAMsUDNfdoaNytb5Zb4vKmclsyfk
    CUanKdxYzx7hSA1PPWd0CMnSObXMleur04PwAUuoBWRYA8T03RY82wzpLLhWY8IFT4t1+R5LlM3A
    KaYOxPNb8ctIT/Y+0M8tFJfrykw6B6+DQRbK9DMHSbdgkitUKdtsllf8i63P+PmOJ2ddkqfna0+z
    13CSEsMnFlS8JBC3eQA1TuT4xzMlW1UNxgh0tYnPqh/G7cdm8jj6Bu0Vf8RTvL1VGUf/w9K0L8ac
    Uq/DPu0esPfmxP4PUEsDBBQAAAAIAExdMlq+02TvUgAAAGYAAAAIAAAAdXRpbHMucHnLzC3ILypR
    KC5JLMksLslMLubl4uVKSU1TSE7MSY5PLEuPTy4o1QDi+BygvJUCiNS04uVSAIKi1JLSojyFovzS
    vBQNhAl6uamJeXAtmjoKRpoAUEsBAh8ACgAAAAAABZUsWgAAAAAAAAAAAAAAAAsAJAAAAAAAAAAg
    AAAAAAAAAF9faW5pdF9fLnB5CgAgAAAAAAABABgAKc1Mjjpl2wEpzUyOOmXbASnNTI46ZdsBUEsB
    Ah8AFAAAAAgA6oAyWv50JIW7AQAAQwUAAAsAJAAAAAAAAAAgAAAAKQAAAG15bW9kdWxlLnB5CgAg
    AAAAAAABABgACTU5M9xp2wEJNTkz3GnbASnNTI46ZdsBUEsBAh8AFAAAAAgATF0yWr7TZO9SAAAA
    ZgAAAAgAJAAAAAAAAAAgAAAADQIAAHV0aWxzLnB5CgAgAAAAAAABABgAmVtNMLdp2wFArHYA1mnb
    AUk2miq2adsBUEsFBgAAAAADAAMAFAEAAIUCAAAAAA==
