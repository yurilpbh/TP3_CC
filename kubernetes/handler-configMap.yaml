apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
  namespace: yuripereira
data:
  pyfile: "import statistics\n\ndef handler(input: dict, context: object) ->
    dict[str, any]:\n    metrics = {}\n    metrics['percent-network-egress'] = round(100*((input['virtual_memory-buffers']+input['virtual_memory-cached'])/input['virtual_memory-total']), 2)\n    metrics['percent-memory-caching'] = round(100*(input['net_io_counters_eth0-bytes_sent1']/(input['net_io_counters_eth0-bytes_sent1']+input['net_io_counters_eth0-bytes_recv1'])), 2)\n    metrics['timestamp'] = input['timestamp']\n    if not hasattr(context, 'monitoring_interval'):\n        avg_window = 60/5\n    else:\n
    \       avg_window = 60/context.monitoring_interval\n    env = context.env\n
    \   for key in input.keys():\n        if 'cpu_percent-' in key:\n            cpu_number
    = key.split('-')[1]\n            if f'cpu-window-{cpu_number}' in env:\n                env[f'cpu-window-{cpu_number}'].append(input[key])\n
    \               if len(env[f'cpu-window-{cpu_number}']) == avg_window + 1:\n                    env[f'cpu-window-{cpu_number}'].pop(0)\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec']
    = round(statistics.mean(env[f'cpu-window-{cpu_number}']), 2)\n                else:\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec'] = 0\n            else:\n
    \               env[f'cpu-window-{cpu_number}'] = [input[key]]\n                metrics[f'avg-util-cpu{cpu_number}-60sec']
    = 0\n    \n    context.env = env\n\n    return metrics"
  env: |
    REDIS_INPUT_KEY=metrics
    HANDLER_FUNCTION_NAME=main
  zipfile: |
    UEsDBBQAAAAAAJSaK1oAAAAAAAAAAAAAAAALAAAAX19pbml0X18ucHlQSwMEFAAAAAgAl4M5WkWs
    In7zAQAAuAUAAAsAAABteW1vZHVsZS5weZ2UwW7iMBCG70i8g6UenCwYwkrbQyX6IlEUGTMBbxPb
    sidhUdV33wkJbSihVPXBUjz/fPPbM4qunPXIatRlmE6mky0UrJLaRNq4Gp/YViucM2UNwj/6tJu/
    oDBm4vkUSQP6OZPmmD1NJ4xWBei1CmzNXt+6E+e1wY4WX50sXuAYorgPPJzTU+7AKzAoDODB+hcB
    Ow8h8IzA3tZmG62S5FfUQVLeaI+1LPMKKuuPYlMXBXhSz8bjSqo9bHkWL8fjaFGWFJ6z37edDVja
    7D4768FkP9c2VxRAcpQD7hOxOSKEPBBkxbPl96Wz+0oPqiFlPLD+bhx1BQFl5U5ee9bgsJPrghmL
    bC+DRPRR3/g545U1Gi21bpfrtm5DTxT3XW+XbHb5QZutPRD9MVn+6UJQBvhC1fMXI/Q+3zSkPMvo
    qzsurGc0O3QNNhykQSW6CFeuzs/94q2WVANJu1qJqasNeCpD4UVwpcaICx6nq+xSS8iiZYruBuL1
    I/nthCd7n/DtotP0dl62kM4BzU3XEbKQxdcMKl2Cie6gYrZeD594xlYjfr7jyVkXJSM+2nWeqIJT
    KdH+OQQlDwHiMQmgTnN2+rEslCxV3hoj0d1LjLzg5RD92ExyybiBveOPOOlHr7Lr/J9Y6vbBmFPo
    fdi73QPW3pzp/wFQSwMEFAAAAAgA2lk0Wr7TZO9SAAAAZgAAAAgAAAB1dGlscy5wecvMLcgvKlEo
    LkksySwuyUwu5uXi5UpJTVNITsxJjk8sS49PLijVAOL4HKC8lQKI1LTi5VIAgqLUktKiPIWi/NK8
    FA2ECXq5qYl5cC2aOgpGmgBQSwECFAAUAAAAAACUmitaAAAAAAAAAAAAAAAACwAAAAAAAAAAACAA
    AAAAAAAAX19pbml0X18ucHlQSwECFAAUAAAACACXgzlaRawifvMBAAC4BQAACwAAAAAAAAABACAA
    AAApAAAAbXltb2R1bGUucHlQSwECFAAUAAAACADaWTRavtNk71IAAABmAAAACAAAAAAAAAABACAA
    AABFAgAAdXRpbHMucHlQSwUGAAAAAAMAAwCoAAAAvQIAAAAA

