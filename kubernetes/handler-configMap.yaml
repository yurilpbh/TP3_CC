apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
  namespace: yuripereira
data:
  pyfile: "import statistics\n\ndef handler(input: dict, context: object) ->
    dict[str, any]:\n    metrics = {}\n    metrics['percent-network-egress'] = round(input['virtual_memory-buffers']/input['virtual_memory-total'],
    2)\n    metrics['percent-memory-caching'] = round(input['virtual_memory-cached']/input['virtual_memory-total'],
    2)\n    if not hasattr(context, 'monitoring_interval'):\n        avg_window = 60/5\n    else:\n
    \       context.set_interval(10)\n        avg_window = 60/context.monitoring_interval\n    env = context.env\n
    \   for key in input.keys():\n        if 'cpu_percent-' in key:\n            cpu_number
    = key.split('-')[1]\n            if f'cpu-window-{cpu_number}' in env:\n                env[f'cpu-window-{cpu_number}'].append(input[key])\n
    \               if len(env[f'cpu-window-{cpu_number}']) == avg_window + 1:\n                    env[f'cpu-window-{cpu_number}'].pop(0)\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec']
    = round(statistics.mean(env[f'cpu-window-{cpu_number}']), 2)\n                else:\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec'] = 0\n            else:\n
    \               env[f'cpu-window-{cpu_number}'] = [input[key]]\n                metrics[f'avg-util-cpu{cpu_number}-60sec']
    = 0\n    \n    context.env = env\n\n    return metrics"
  env: |
    REDIS_INPUT_KEY=metrics
    HANDLER_FUNCTION_NAME=main
  zipfile: |
    UEsDBAoAAAAAAAWVLFoAAAAAAAAAAAAAAAALAAAAX19pbml0X18ucHlQSwMEFAAAAAgAiHwyWkJU
    RYmwAQAAFAUAAAsAAABteW1vZHVsZS5wea1T22rjMBB9N/gf5k02G7lOYftQyP6IMUaRx6m2tiQk
    OdlQ+u8dX9K6bbIJy+pBIM2Zc86MRqqzxgXog2p9HMVRjQ10QulEaduHR6iVDCuQRgf8Q0ez/Y0y
    pMB/jZHCB7cCoY/lYxwBrQ6DU9LDBl5eP90UzKKTqAPXGA7GPXPcOfSelYR1ptf1pFiwvXKhF23V
    YWfckW/7pkFHuLvz8WCCaFm5gvv0guAMlEI+Kb27KjjgsL5dTzWgTYAn4UUILplbtQLWGa2CcaRZ
    Kbpze8pL5z4NS+x31UHp2hzI0UN+93MKYetxgZr5sjNslLbOL/P9JXNW0ntCnmB0mq4b4+AZj6A0
    jC3I6OCTpXMqmUnbV6cOswFLqAVkWANE990WHWyGcOZtq0LCOEuLdfkZS5TNwMmnCvjLR/LrSE/2
    vtDPJRSX88pMWIvvL00WyvQ7B0m3qJMrVClsNssW/4D1GT+3eLLGJnl6Pvc0vA0jKT78Sk7JSwL+
    kHuU4xSPnzaTopXVYIxAV4v4rvpl3P7ZTB5HN9Be8Uc8xcdblXH0PyxN+2LMKfQ+7NPuMPROn9jf
    AFBLAwQUAAAACABMXTJavtNk71IAAABmAAAACAAAAHV0aWxzLnB5y8wtyC8qUSguSSzJLC7JTC7m
    5eLlSklNU0hOzEmOTyxLj08uKNUA4vgcoLyVAojUtOLlUgCCotSS0qI8haL80rwUDYQJermpiXlw
    LZo6CkaaAFBLAQIfAAoAAAAAAAWVLFoAAAAAAAAAAAAAAAALACQAAAAAAAAAIAAAAAAAAABfX2lu
    aXRfXy5weQoAIAAAAAAAAQAYACnNTI46ZdsBKc1Mjjpl2wEpzUyOOmXbAVBLAQIfABQAAAAIAIh8
    MlpCVEWJsAEAABQFAAALACQAAAAAAAAAIAAAACkAAABteW1vZHVsZS5weQoAIAAAAAAAAQAYAGnB
    ptzXadsBacGm3Ndp2wEpzUyOOmXbAVBLAQIfABQAAAAIAExdMlq+02TvUgAAAGYAAAAIACQAAAAA
    AAAAIAAAAAICAAB1dGlscy5weQoAIAAAAAAAAQAYAJlbTTC3adsBQKx2ANZp2wFJNpoqtmnbAVBL
    BQYAAAAAAwADABQBAAB6AgAAAAA=


