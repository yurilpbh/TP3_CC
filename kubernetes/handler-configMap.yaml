apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
  namespace: yuripereira
data:
  pyfile: "import statistics\n\ndef handler(input: dict, context: object) ->
    dict[str, any]:\n    metrics = {}\n    metrics['percent-network-egress'] = round(100*((input['virtual_memory-buffers']+input['virtual_memory-cached'])/input['virtual_memory-total']), 2)\n    metrics['percent-memory-caching'] = round(100*(input['net_io_counters_eth0-bytes_sent1']/(input['net_io_counters_eth0-bytes_sent1']+input['net_io_counters_eth0-bytes_recv1'])), 2)\n    metrics['timestamp'] = input['timestamp']\n    if not hasattr(context, 'monitoring_interval'):\n        avg_window = 60/5\n    else:\n
    \       avg_window = 60/context.monitoring_interval\n    env = context.env\n
    \   for key in input.keys():\n        if 'cpu_percent-' in key:\n            cpu_number
    = key.split('-')[1]\n            if f'cpu-window-{cpu_number}' in env:\n                env[f'cpu-window-{cpu_number}'].append(input[key])\n
    \               if len(env[f'cpu-window-{cpu_number}']) == avg_window + 1:\n                    env[f'cpu-window-{cpu_number}'].pop(0)\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec']
    = round(statistics.mean(env[f'cpu-window-{cpu_number}']), 2)\n                else:\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec'] = 0\n            else:\n
    \               env[f'cpu-window-{cpu_number}'] = [input[key]]\n                metrics[f'avg-util-cpu{cpu_number}-60sec']
    = 0\n    \n    context.env = env\n\n    return metrics"
  env: |
    REDIS_INPUT_KEY=metrics
    HANDLER_FUNCTION_NAME=main
  zipfile: |
    UEsDBBQAAAAAAJSaK1oAAAAAAAAAAAAAAAALAAAAX19pbml0X18ucHlQSwMEFAAAAAgA0YA5WszS
    TXLiAQAAiQUAAAsAAABteW1vZHVsZS5weZ1Uy27jMAy8B8g/6CZ7EznOAttDgfRHDMNQZDrR1pYM
    iXYaFP33pR/ZOq3TFOVBgMjhcCgS0lVtHbIGdemXi+Uih4JVUptAm7rBR5ZrhWumrEF4oavd/wWF
    IRNPfSTx6NZMmnP6uFwwsgrQaeXZjr2+XXkSXoNTYFAYwJN1zwIODrznKWGdbUwebOP4VzDUTXir
    HTayzCqorDuLfVMU4Ai9mo8rqY6Q8zTczMfRoiwpvGa/wxu6JkzaHD7qGmlJfKZtpiiApCcDPMZi
    f0bwmSeSLU8334eu7iMdqJaQ4Zxw1BV4lFXdax25Js4BrgtmLLKj9BLRBeMk14xX1mi0jnrNdFe3
    pQcKxzF2JttDdtImtydif4g3f4YQlB6+QI380Qz7mG9aQl5gdBvchXXsGc7UxtBJRBcfTPVQI1zV
    TXaZF++whJpAOusgpqn24KgMhSNflxoDLniYbNNrLFEWHacYOhCv78lvPT3J+0DfGXmT23lpJOsa
    aG+GiZCENPzMQaVLMMEdqpDtdtMnXrHtjJ7vaKptHcQzOjq7bFTBqZTovgJByVMC8RB7UP2e9T9F
    pGSpsk4Yge42MfOC10v0YzHxNccN2jv6iCd5n1X6Of8nkoZzsuYU+r/sw+kAG2cu7P8AUEsDBBQA
    AAAIANpZNFq+02TvUgAAAGYAAAAIAAAAdXRpbHMucHnLzC3ILypRKC5JLMksLslMLubl4uVKSU1T
    SE7MSY5PLEuPTy4o1QDi+BygvJUCiNS04uVSAIKi1JLSojyFovzSvBQNhAl6uamJeXAtmjoKRpoA
    UEsBAhQAFAAAAAAAlJorWgAAAAAAAAAAAAAAAAsAAAAAAAAAAAAgAAAAAAAAAF9faW5pdF9fLnB5
    UEsBAhQAFAAAAAgA0YA5WszSTXLiAQAAiQUAAAsAAAAAAAAAAQAgAAAAKQAAAG15bW9kdWxlLnB5
    UEsBAhQAFAAAAAgA2lk0Wr7TZO9SAAAAZgAAAAgAAAAAAAAAAQAgAAAANAIAAHV0aWxzLnB5UEsF
    BgAAAAADAAMAqAAAAKwCAAAAAA==
