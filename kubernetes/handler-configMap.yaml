apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
  namespace: yuripereira
data:
  pyfile: "import statistics\n\ndef handler(input: dict, context: object) ->
    dict[str, any]:\n    metrics = {}\n    metrics['percent-network-egress'] = round(input['virtual_memory-buffers']/input['virtual_memory-total'],
    2)\n    metrics['percent-memory-caching'] = round(input['virtual_memory-cached']/input['virtual_memory-total'],
    2)\n    if not hasattr(context, 'monitoring_interval'):\n        avg_window = 60/5\n    else:\n
    \       context.set_interval(10)\n        avg_window = 60/context.monitoring_interval\n    env = context.env\n
    \   for key in input.keys():\n        if 'cpu_percent-' in key:\n            cpu_number
    = key.split('-')[1]\n            if f'cpu-window-{cpu_number}' in env:\n                env[f'cpu-window-{cpu_number}'].append(input[key])\n
    \               if len(env[f'cpu-window-{cpu_number}']) == avg_window + 1:\n                    env[f'cpu-window-{cpu_number}'].pop(0)\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec']
    = round(statistics.mean(env[f'cpu-window-{cpu_number}']), 2)\n                else:\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec'] = 0\n            else:\n
    \               env[f'cpu-window-{cpu_number}'] = [input[key]]\n                metrics[f'avg-util-cpu{cpu_number}-60sec']
    = 0\n    \n    context.env = env\n\n    return metrics"
  env: |
    REDIS_INPUT_KEY=metrics
    HANDLER_FUNCTION_NAME=main
  zipfile: |
    UEsDBBQAAAAIAExdMlq+02TvUgAAAGYAAAAIAAAAdXRpbHMucHnLzC3ILypRKC5JLMksLslMLubl
    4uVKSU1TSE7MSY5PLEuPTy4o1QDi+BygvJUCiNS04uVSAIKi1JLSojyFovzSvBQNhAl6uamJeXAt
    mjoKRpoAUEsDBAoAAAAAAAWVLFoAAAAAAAAAAAAAAAALAAAAX19pbml0X18ucHlQSwMEFAAAAAgA
    W10yWp7SeROxAQAAFwUAAAcAAABtYWluLnB5rVPbauMwEH03+B/0JpuNXKewfShkf8QYo8jjVFtb
    EtI42VD67x1f0rptsgnL6kEgzZlzzoxGunPWI+tRtyGO4qiGhj1JU7fgE21cj4+s1gpXTFmD8IeO
    dvsbFKZM/BojRUC/YtIcy8c4YrQ6QK9VYBv28vrppuAOvAKDwgAerH8WsPMQAi8J621v6kmx4Hvt
    sZdt1UFn/VFs+6YBT7i783G0KFterth9ekFwBiqpnrTZXRUccFDfrqcbZixS34JE9MncqhXjnTUa
    rSfNStOd31NeOvdpWHK/qw7a1PZAjh7yu59TCNoAC9TMl51ho7R1fpnvL5mzktkT8gSj03TdWM+e
    4ci0YWMLMjqEZOmcSubK9dWpw3zAEmoBGdYAMX23Bc82QzgLrtWYcMHTYl1+xhJlM3CKqQLx8pH8
    OtKTvS/0cwnF5bwyk87B+0uThTL9zkHSLZjkClXKNptli3+w9Rk/t3hy1iV5ej73NLwNJykxfExB
    yUsC8ZAHUOMUj/82U7JV1WCMQFeL+K76Zdz+2UweRzfQXvFHPMXHW5Vx9D8sTftizCn0PuzT7gF7
    b07sb1BLAQIfABQAAAAIAExdMlq+02TvUgAAAGYAAAAIACQAAAAAAAAAIAAAAAAAAAB1dGlscy5w
    eQoAIAAAAAAAAQAYAJlbTTC3adsBBYDoy8Bp2wFJNpoqtmnbAVBLAQIfAAoAAAAAAAWVLFoAAAAA
    AAAAAAAAAAALACQAAAAAAAAAIAAAAHgAAABfX2luaXRfXy5weQoAIAAAAAAAAQAYACnNTI46ZdsB
    Kc1Mjjpl2wEpzUyOOmXbAVBLAQIfABQAAAAIAFtdMlqe0nkTsQEAABcFAAAHACQAAAAAAAAAIAAA
    AKEAAABtYWluLnB5CgAgAAAAAAABABgANgvxQbdp2wFqXeb51WnbASnNTI46ZdsBUEsFBgAAAAAD
    AAMAEAEAAHcCAAAAAA==

