apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
  namespace: yuripereira
data:
  pyfile: "import statistics\n\ndef handler(input: dict, context: object) ->
    dict[str, any]:\n    metrics = {}\n    metrics['percent-network-egress'] = round(100*((input['virtual_memory-buffers']+input['virtual_memory-cached'])/input['virtual_memory-total']), 2)\n    metrics['percent-memory-caching'] = round(100*(input['net_io_counters_eth0-bytes_sent1']/(input['net_io_counters_eth0-bytes_sent1']+input['net_io_counters_eth0-bytes_recv1'])), 2)\n    metrics['timestamp'] = input['timestamp']\n    if not hasattr(context, 'monitoring_interval'):\n        avg_window = 60/5\n    else:\n
    \       avg_window = 60/context.monitoring_interval\n    env = context.env\n
    \   for key in input.keys():\n        if 'cpu_percent-' in key:\n            cpu_number
    = key.split('-')[1]\n            if f'cpu-window-{cpu_number}' in env:\n                env[f'cpu-window-{cpu_number}'].append(input[key])\n
    \               if len(env[f'cpu-window-{cpu_number}']) == avg_window + 1:\n                    env[f'cpu-window-{cpu_number}'].pop(0)\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec']
    = round(statistics.mean(env[f'cpu-window-{cpu_number}']), 2)\n                else:\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec'] = 0\n            else:\n
    \               env[f'cpu-window-{cpu_number}'] = [input[key]]\n                metrics[f'avg-util-cpu{cpu_number}-60sec']
    = 0\n    \n    context.env = env\n\n    return metrics"
  env: |
    REDIS_INPUT_KEY=metrics
    HANDLER_FUNCTION_NAME=main
  zipfile: |
    UEsDBBQAAAAAAJSaK1oAAAAAAAAAAAAAAAALAAAAX19pbml0X18ucHlQSwMEFAAAAAgACoM5Wokh
    LGroAQAAmwUAAAsAAABteW1vZHVsZS5weZ2UwW7iMBCG70i8g29OFgxhpe2hEn2RKIqMmYC3iW3Z
    Eyiq+u47wWEb2lCq+hDJnn8+/+MZRTfOemQt6jpMJ9PJFirWSG0SbVyLj2yrFc6ZsgbhhbZ28xcU
    pkw8nSN5QD9n0pyKx+mE0WoAvVaBrdnrWzxxXhuMtPRKk3MHXoFBYQCP1j8L2HkIgReU7W1rtskq
    y34lMTfnB+2xlXXZQGP9SWzaqgJP6tl4XEm1hy0v0uV4HC3KmsJz9vuWrwFJm91HXz2WzJfalooC
    SH5KwH0mNieEUAaCrHix/L50dl/pQR1ImY4ZR91AQNm4s9eeNTiMcl0xY5HtZZCIPul7O2e8sUaj
    pX7tSt3de6AHSvvGdkseduVRm609Ev0hW/6JIagDfKHq+YsRep9vDqS8yGgXjyvr2TOcqIxYyYI2
    IRn6oUK4cm156RfvtKQaSLrVSUzbbMDTNRReBFdrTLjgab4qrrWErDqmiBWI1/fktzOe7H3Ad4tO
    89t5xUI6BzQ3sSNkoUg/M+jqGkxyB5Wy9Xr4xDO2GvHzHU/OuiQb8dGty0RVnK4S3c9BUPIQIB6y
    AOo8Z+d/x0LJWpWdMRLdLWLkBa+H6MdmsmvGDewdf8TJ33tVfM7/iaX4HYw5hf4Pe/x6wNabC/0f
    UEsDBBQAAAAIANpZNFq+02TvUgAAAGYAAAAIAAAAdXRpbHMucHnLzC3ILypRKC5JLMksLslMLubl
    4uVKSU1TSE7MSY5PLEuPTy4o1QDi+BygvJUCiNS04uVSAIKi1JLSojyFovzSvBQNhAl6uamJeXAt
    mjoKRpoAUEsBAhQAFAAAAAAAlJorWgAAAAAAAAAAAAAAAAsAAAAAAAAAAAAgAAAAAAAAAF9faW5p
    dF9fLnB5UEsBAhQAFAAAAAgACoM5WokhLGroAQAAmwUAAAsAAAAAAAAAAQAgAAAAKQAAAG15bW9k
    dWxlLnB5UEsBAhQAFAAAAAgA2lk0Wr7TZO9SAAAAZgAAAAgAAAAAAAAAAQAgAAAAOgIAAHV0aWxz
    LnB5UEsFBgAAAAADAAMAqAAAALICAAAAAA==
