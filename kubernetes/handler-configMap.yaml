apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
  namespace: yuripereira
data:
  pyfile: "import json, statistics\n\ndef handler(input: dict, context: object) ->
    dict[str, any]:\n    metrics = {}\n    metrics['percent-network-egress'] = round(input['virtual_memory-buffers']/input['virtual_memory-total'],
    2)\n    metrics['percent-memory-caching'] = round(input['virtual_memory-cached']/input['virtual_memory-total'],
    2)\n    if 'execution_time' not in context:\n        avg_window = 60/5\n    else:\n
    \       avg_window = 60/context['execution_time']\n    env = json.loads(context['env'])\n
    \   for key in input.keys():\n        if 'cpu_percent-' in key:\n            cpu_number
    = key.split('-')[1]\n            if f'cpu-window-{cpu_number}' in env:\n                env[f'cpu-window-{cpu_number}'].append(input[key])\n
    \               if len(env[f'cpu-window-{cpu_number}']) == avg_window + 1:\n                    env[f'cpu-window-{cpu_number}'].pop(0)\n
    \                   print(env[f'cpu-window-{cpu_number}'])\n                    metrics[f'avg-util-cpu{key}-60sec']
    = round(statistics.mean(env[f'cpu-window-{cpu_number}']), 2)\n                else:\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec'] = 0\n            else:\n
    \               env[f'cpu-window-{cpu_number}'] = [input[key]]\n                metrics[f'avg-util-cpu{cpu_number}-60sec']
    = 0\n    \n    context['env'] = env\n\n    return metrics"
