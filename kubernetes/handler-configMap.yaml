apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
  namespace: yuripereira
data:
  pyfile: "import statistics\n\ndef handler(input: dict, context: object) ->
    dict[str, any]:\n    metrics = {}\n    metrics['percent-network-egress'] = round(input['virtual_memory-buffers']/input['virtual_memory-total'],
    2)\n    metrics['percent-memory-caching'] = round(input['virtual_memory-cached']/input['virtual_memory-total'],
    2)\n    if not hasattr(context, 'monitoring_interval'):\n        avg_window = 60/5\n    else:\n
    \       context.set_interval(10)\n        avg_window = 60/context.monitoring_interval\n    env = context.env\n
    \   for key in input.keys():\n        if 'cpu_percent-' in key:\n            cpu_number
    = key.split('-')[1]\n            if f'cpu-window-{cpu_number}' in env:\n                env[f'cpu-window-{cpu_number}'].append(input[key])\n
    \               if len(env[f'cpu-window-{cpu_number}']) == avg_window + 1:\n                    env[f'cpu-window-{cpu_number}'].pop(0)\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec']
    = round(statistics.mean(env[f'cpu-window-{cpu_number}']), 2)\n                else:\n
    \                   metrics[f'avg-util-cpu{cpu_number}-60sec'] = 0\n            else:\n
    \               env[f'cpu-window-{cpu_number}'] = [input[key]]\n                metrics[f'avg-util-cpu{cpu_number}-60sec']
    = 0\n    \n    context.env = env\n\n    return metrics"
  env: REDIS_INPUT_KEY=metrics
  zipfile: |
    UEsDBBQAAAAIAFtdMlqe0nkTsQEAABcFAAALAAAAbXltb2R1bGUucHmtU9tq4zAQfTf4H/Qmm41c
    p7B9KGR/xBijyONUW1sS0jjZUPrvHV/Sum2yCcvqQSDNmXPOjEa6c9Yj61G3IY7iqIaGPUlTt+AT
    bVyPj6zWCldMWYPwh452+xsUpkz8GiNFQL9i0hzLxzhitDpAr1VgG/by+umm4A68AoPCAB6sfxaw
    8xACLwnrbW/qSbHge+2xl23VQWf9UWz7pgFPuLvzcbQoW16u2H16QXAGKqmetNldFRxwUN+upxtm
    LFLfgkT0ydyqFeOdNRqtJ81K053fU14692lYcr+rDtrU9kCOHvK7n1MI2gAL1MyXnWGjtHV+me8v
    mbOS2RPyBKPTdN1Yz57hyLRhYwsyOoRk6ZxK5sr11anDfMASagEZ1gAxfbcFzzZDOAuu1ZhwwdNi
    XX7GEmUzcIqpAvHykfw60pO9L/RzCcXlvDKTzsH7S5OFMv3OQdItmOQKVco2m2WLf7D1GT+3eHLW
    JXl6Pvc0vA0nKTF8TEHJSwLxkAdQ4xSP/zZTslXVYIxAV4v4rvpl3P7ZTB5HN9Be8Uc8xcdblXH0
    PyxN+2LMKfQ+7NPuAXtvTuxvUEsDBBQAAAAIAExdMlq+02TvUgAAAGYAAAAIAAAAdXRpbHMucHnL
    zC3ILypRKC5JLMksLslMLubl4uVKSU1TSE7MSY5PLEuPTy4o1QDi+BygvJUCiNS04uVSAIKi1JLS
    ojyFovzSvBQNhAl6uamJeXAtmjoKRpoAUEsDBAoAAAAAAAWVLFoAAAAAAAAAAAAAAAALAAAAX19p
    bml0X18ucHlQSwECHwAUAAAACABbXTJantJ5E7EBAAAXBQAACwAkAAAAAAAAACAAAAAAAAAAbXlt
    b2R1bGUucHkKACAAAAAAAAEAGAA2C/FBt2nbATYL8UG3adsBKc1Mjjpl2wFQSwECHwAUAAAACABM
    XTJavtNk71IAAABmAAAACAAkAAAAAAAAACAAAADaAQAAdXRpbHMucHkKACAAAAAAAAEAGACZW00w
    t2nbAZlbTTC3adsBSTaaKrZp2wFQSwECHwAKAAAAAAAFlSxaAAAAAAAAAAAAAAAACwAkAAAAAAAA
    ACAAAABSAgAAX19pbml0X18ucHkKACAAAAAAAAEAGAApzUyOOmXbASnNTI46ZdsBKc1Mjjpl2wFQ
    SwUGAAAAAAMAAwAUAQAAewIAAAAA
